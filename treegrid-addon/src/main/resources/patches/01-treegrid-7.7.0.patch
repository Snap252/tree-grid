From 52636b116562446883626e2e577ae69a381349e3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johannes=20Dahlstr=C3=B6m?= <johannesd@vaadin.com>
Date: Tue, 2 Aug 2016 12:07:22 +0300
Subject: [PATCH 1/4] Start client-side Grid DOM event handling refactor

Change-Id: I5309cb6e5792d4f26bcf47d598ad73faac36132a
---
 .../main/java/com/vaadin/client/widgets/Grid.java  | 49 +++++++++++++++-------
 1 file changed, 33 insertions(+), 16 deletions(-)

diff --git a/client/src/main/java/com/vaadin/client/widgets/Grid.java b/client/src/main/java/com/vaadin/client/widgets/Grid.java
index 7e5838b..4722267 100644
--- a/client/src/main/java/com/vaadin/client/widgets/Grid.java
+++ b/client/src/main/java/com/vaadin/client/widgets/Grid.java
@@ -7191,31 +7191,34 @@ public class Grid<T> extends ResizeComposite implements
         eventCell.set(cell, getSectionFromContainer(container));
 
         // Editor can steal focus from Grid and is still handled
-        if (isEditorEnabled() && handleEditorEvent(event, container)) {
+        if (handleEditorEvent(event, container)) {
             return;
         }
 
         // Fire GridKeyEvents and GridClickEvents. Pass the event to escalator.
-        super.onBrowserEvent(event);
+        if (handleSuperEvent(event, container)) {
+            return;
+        }
 
-        if (!isElementInChildWidget(e)) {
+        if (handleChildWidgetEvent(event, container)) {
+            return;
+        }
 
-            if (handleHeaderCellDragStartEvent(event, container)) {
-                return;
-            }
+        if (handleHeaderCellDragStartEvent(event, container)) {
+            return;
+        }
 
-            // Sorting through header Click / KeyUp
-            if (handleHeaderDefaultRowEvent(event, container)) {
-                return;
-            }
+        // Sorting through header Click / KeyUp
+        if (handleHeaderDefaultRowEvent(event, container)) {
+            return;
+        }
 
-            if (handleRendererEvent(event, container)) {
-                return;
-            }
+        if (handleRendererEvent(event, container)) {
+            return;
+        }
 
-            if (handleCellFocusEvent(event, container)) {
-                return;
-            }
+        if (handleCellFocusEvent(event, container)) {
+            return;
         }
     }
 
@@ -7269,6 +7272,10 @@ public class Grid<T> extends ResizeComposite implements
     }
 
     private boolean handleEditorEvent(Event event, RowContainer container) {
+        if (!isEditorEnabled()) {
+            return false;
+        }
+
         Widget w;
         if (editor.focusedColumnIndex < 0) {
             w = null;
@@ -7282,6 +7289,16 @@ public class Grid<T> extends ResizeComposite implements
         return getEditor().getEventHandler().handleEvent(editorEvent);
     }
 
+    private boolean handleSuperEvent(Event event, RowContainer container) {
+        super.onBrowserEvent(event);
+        return false;
+    }
+
+    private boolean handleChildWidgetEvent(Event event,
+            RowContainer container) {
+        return isElementInChildWidget(Element.as(event.getEventTarget()));
+    }
+
     private boolean handleRendererEvent(Event event, RowContainer container) {
 
         if (container == escalator.getBody()) {
-- 
2.7.4 (Apple Git-66)


From cfe7c9e252e080fc8d9ab86d6b162959e9b680e1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johannes=20Dahlstr=C3=B6m?= <johannesd@vaadin.com>
Date: Tue, 2 Aug 2016 12:46:50 +0300
Subject: [PATCH 2/4] Refactor Grid event handling methods to instances of a
 handler interface

Change-Id: I922ea1d722d5f5fc742cc981ca997e96c1f48b38
---
 .../main/java/com/vaadin/client/widgets/Grid.java  | 316 ++++++++++++---------
 1 file changed, 183 insertions(+), 133 deletions(-)

diff --git a/client/src/main/java/com/vaadin/client/widgets/Grid.java b/client/src/main/java/com/vaadin/client/widgets/Grid.java
index 4722267..5eb1b55 100644
--- a/client/src/main/java/com/vaadin/client/widgets/Grid.java
+++ b/client/src/main/java/com/vaadin/client/widgets/Grid.java
@@ -2413,6 +2413,27 @@ public class Grid<T> extends ResizeComposite implements
         }
     }
 
+    /**
+     * A handler for DOM events emitted by elements in Grid.
+     *
+     * @param <T>
+     *            the grid row type
+     */
+    public interface BrowserEventHandler<T> {
+        /**
+         * Attempts to handle the given DOM event. Returns whether the event was
+         * handled and subsequent handlers should not be run.
+         * 
+         * @param event
+         *            the event that occurred
+         * @param cell
+         *            the cell where the event occurred
+         * @return true if subsequent handlers should not be run, false
+         *         otherwise
+         */
+        public boolean onEvent(Event event, EventCellReference<T> cell);
+    }
+
     private static final String CUSTOM_STYLE_PROPERTY_NAME = "customStyle";
 
     /**
@@ -7191,33 +7212,33 @@ public class Grid<T> extends ResizeComposite implements
         eventCell.set(cell, getSectionFromContainer(container));
 
         // Editor can steal focus from Grid and is still handled
-        if (handleEditorEvent(event, container)) {
+        if (editorEventHandler.onEvent(event, eventCell)) {
             return;
         }
 
         // Fire GridKeyEvents and GridClickEvents. Pass the event to escalator.
-        if (handleSuperEvent(event, container)) {
+        if (superEventHandler.onEvent(event, eventCell)) {
             return;
         }
 
-        if (handleChildWidgetEvent(event, container)) {
+        if (childWidgetEventHandler.onEvent(event, eventCell)) {
             return;
         }
 
-        if (handleHeaderCellDragStartEvent(event, container)) {
+        if (headerCellDragStartHandler.onEvent(event, eventCell)) {
             return;
         }
 
         // Sorting through header Click / KeyUp
-        if (handleHeaderDefaultRowEvent(event, container)) {
+        if (headerDefaultRowEventHandler.onEvent(event, eventCell)) {
             return;
         }
 
-        if (handleRendererEvent(event, container)) {
+        if (rendererEventHandler.onEvent(event, eventCell)) {
             return;
         }
 
-        if (handleCellFocusEvent(event, container)) {
+        if (cellFocusEventHandler.onEvent(event, eventCell)) {
             return;
         }
     }
@@ -7271,191 +7292,220 @@ public class Grid<T> extends ResizeComposite implements
         return w != null;
     }
 
-    private boolean handleEditorEvent(Event event, RowContainer container) {
-        if (!isEditorEnabled()) {
-            return false;
+    private BrowserEventHandler<T> editorEventHandler = new BrowserEventHandler<T>() {
+
+        @Override
+        public boolean onEvent(Event e, EventCellReference<T> cell) {
+            if (!isEditorEnabled()) {
+                return false;
+            }
+
+            Widget w;
+            if (editor.focusedColumnIndex < 0) {
+                w = null;
+            } else {
+                w = editor.getWidget(getColumn(editor.focusedColumnIndex));
+            }
+
+            EditorDomEvent<T> editorEvent = new EditorDomEvent<>(e, cell, w);
+
+            return getEditor().getEventHandler().handleEvent(editorEvent);
         }
+    };
 
-        Widget w;
-        if (editor.focusedColumnIndex < 0) {
-            w = null;
-        } else {
-            w = editor.getWidget(getColumn(editor.focusedColumnIndex));
+    private BrowserEventHandler<T> superEventHandler = new BrowserEventHandler<T>() {
+
+        @Override
+        public boolean onEvent(Event event, EventCellReference<T> cell) {
+            Grid.super.onBrowserEvent(event);
+            return false;
         }
+    };
 
-        EditorDomEvent<T> editorEvent = new EditorDomEvent<T>(event,
-                getEventCell(), w);
+    private BrowserEventHandler<T> childWidgetEventHandler = new BrowserEventHandler<T>() {
 
-        return getEditor().getEventHandler().handleEvent(editorEvent);
-    }
+        @Override
+        public boolean onEvent(Event e, EventCellReference<T> cell) {
+            return isElementInChildWidget(Element.as(e.getEventTarget()));
+        }
+    };
 
-    private boolean handleSuperEvent(Event event, RowContainer container) {
-        super.onBrowserEvent(event);
-        return false;
-    }
+    private BrowserEventHandler<T> rendererEventHandler = new BrowserEventHandler<T>() {
 
-    private boolean handleChildWidgetEvent(Event event,
-            RowContainer container) {
-        return isElementInChildWidget(Element.as(event.getEventTarget()));
-    }
+        @Override
+        public boolean onEvent(Event e, EventCellReference<T> cell) {
 
-    private boolean handleRendererEvent(Event event, RowContainer container) {
+            if (!cell.isBody()) {
+                return false;
+            }
 
-        if (container == escalator.getBody()) {
-            Column<?, T> gridColumn = eventCell.getColumn();
-            boolean enterKey = event.getType().equals(BrowserEvents.KEYDOWN)
-                    && event.getKeyCode() == KeyCodes.KEY_ENTER;
-            boolean doubleClick = event.getType()
+            Column<?, T> gridColumn = cell.getColumn();
+            boolean enterKey = e.getType().equals(BrowserEvents.KEYDOWN)
+                    && e.getKeyCode() == KeyCodes.KEY_ENTER;
+            boolean doubleClick = e.getType()
                     .equals(BrowserEvents.DBLCLICK);
 
             if (gridColumn.getRenderer() instanceof ComplexRenderer) {
                 ComplexRenderer<?> cplxRenderer = (ComplexRenderer<?>) gridColumn
                         .getRenderer();
-                if (cplxRenderer.getConsumedEvents().contains(event.getType())) {
-                    if (cplxRenderer.onBrowserEvent(eventCell, event)) {
+                if (cplxRenderer.getConsumedEvents().contains(e
+                        .getType())) {
+                    if (cplxRenderer.onBrowserEvent(cell, e)) {
                         return true;
                     }
                 }
 
                 // Calls onActivate if KeyDown and Enter or double click
                 if ((enterKey || doubleClick)
-                        && cplxRenderer.onActivate(eventCell)) {
+                        && cplxRenderer.onActivate(cell)) {
                     return true;
                 }
             }
+            return false;
         }
-        return false;
-    }
+    };
 
-    private boolean handleCellFocusEvent(Event event, RowContainer container) {
-        Collection<String> navigation = cellFocusHandler.getNavigationEvents();
-        if (navigation.contains(event.getType())) {
-            cellFocusHandler.handleNavigationEvent(event, eventCell);
-        }
-        return false;
-    }
+    private BrowserEventHandler<T> cellFocusEventHandler = new BrowserEventHandler<T>() {
 
-    private boolean handleHeaderCellDragStartEvent(Event event,
-            RowContainer container) {
-        if (!isColumnReorderingAllowed()) {
-            return false;
-        }
-        if (container != escalator.getHeader()) {
-            return false;
-        }
-        if (eventCell.getColumnIndex() < escalator.getColumnConfiguration()
-                .getFrozenColumnCount()) {
+        @Override
+        public boolean onEvent(Event e, EventCellReference<T> cell) {
+            Collection<String> navigation = cellFocusHandler
+                    .getNavigationEvents();
+            if (navigation.contains(e.getType())) {
+                cellFocusHandler.handleNavigationEvent(e, cell);
+            }
             return false;
         }
+    };
 
-        if (event.getTypeInt() == Event.ONMOUSEDOWN
-                && event.getButton() == NativeEvent.BUTTON_LEFT
-                || event.getTypeInt() == Event.ONTOUCHSTART) {
-            dndHandler.onDragStartOnDraggableElement(event,
-                    headerCellDndCallback);
-            event.preventDefault();
-            event.stopPropagation();
-            return true;
+    private BrowserEventHandler<T> headerCellDragStartHandler = new BrowserEventHandler<T>() {
+
+        @Override
+        public boolean onEvent(Event e, EventCellReference<T> cell) {
+            if (!isColumnReorderingAllowed()) {
+                return false;
+            }
+            if (!cell.isHeader()) {
+                return false;
+            }
+            if (cell.getColumnIndex() < escalator.getColumnConfiguration()
+                    .getFrozenColumnCount()) {
+                return false;
+            }
+
+            if (e.getTypeInt() == Event.ONMOUSEDOWN
+                    && e.getButton() == NativeEvent.BUTTON_LEFT
+                    || e.getTypeInt() == Event.ONTOUCHSTART) {
+                dndHandler.onDragStartOnDraggableElement(e,
+                        headerCellDndCallback);
+                e.preventDefault();
+                e.stopPropagation();
+                return true;
+            }
+            return false;
         }
-        return false;
-    }
+    };
 
-    private Point rowEventTouchStartingPoint;
     private CellStyleGenerator<T> cellStyleGenerator;
     private RowStyleGenerator<T> rowStyleGenerator;
-    private RowReference<T> rowReference = new RowReference<T>(this);
-    private CellReference<T> cellReference = new CellReference<T>(rowReference);
+    private RowReference<T> rowReference = new RowReference<>(this);
+    private CellReference<T> cellReference = new CellReference<>(rowReference);
     private RendererCellReference rendererCellReference = new RendererCellReference(
             (RowReference<Object>) rowReference);
 
-    private boolean handleHeaderDefaultRowEvent(Event event,
-            RowContainer container) {
-        if (container != escalator.getHeader()) {
-            return false;
-        }
-        if (!getHeader().getRow(eventCell.getRowIndex()).isDefault()) {
-            return false;
-        }
-        if (!eventCell.getColumn().isSortable()) {
-            // Only handle sorting events if the column is sortable
-            return false;
-        }
+    private BrowserEventHandler<T> headerDefaultRowEventHandler = new BrowserEventHandler<T>() {
 
-        if (BrowserEvents.MOUSEDOWN.equals(event.getType())
-                && event.getShiftKey()) {
-            // Don't select text when shift clicking on a header.
-            event.preventDefault();
-        }
+        private Point rowEventTouchStartingPoint;
 
-        if (BrowserEvents.TOUCHSTART.equals(event.getType())) {
-            if (event.getTouches().length() > 1) {
+        @Override
+        public boolean onEvent(Event event, EventCellReference<T> cell) {
+            if (!cell.isHeader()) {
+                return false;
+            }
+            if (!getHeader().getRow(cell.getRowIndex()).isDefault()) {
+                return false;
+            }
+            if (!cell.getColumn().isSortable()) {
+                // Only handle sorting events if the column is sortable
                 return false;
             }
 
-            event.preventDefault();
+            if (BrowserEvents.MOUSEDOWN.equals(event.getType())
+                    && event.getShiftKey()) {
+                // Don't select text when shift clicking on a header.
+                event.preventDefault();
+            }
 
-            Touch touch = event.getChangedTouches().get(0);
-            rowEventTouchStartingPoint = new Point(touch.getClientX(),
-                    touch.getClientY());
+            if (BrowserEvents.TOUCHSTART.equals(event.getType())) {
+                if (event.getTouches().length() > 1) {
+                    return false;
+                }
 
-            sorter.sortAfterDelay(GridConstants.LONG_TAP_DELAY, true);
+                event.preventDefault();
 
-            return true;
+                Touch touch = event.getChangedTouches().get(0);
+                rowEventTouchStartingPoint = new Point(touch.getClientX(),
+                        touch.getClientY());
 
-        } else if (BrowserEvents.TOUCHMOVE.equals(event.getType())) {
-            if (event.getTouches().length() > 1) {
-                return false;
-            }
+                sorter.sortAfterDelay(GridConstants.LONG_TAP_DELAY, true);
 
-            event.preventDefault();
+                return true;
 
-            Touch touch = event.getChangedTouches().get(0);
-            double diffX = Math.abs(touch.getClientX()
-                    - rowEventTouchStartingPoint.getX());
-            double diffY = Math.abs(touch.getClientY()
-                    - rowEventTouchStartingPoint.getY());
+            } else if (BrowserEvents.TOUCHMOVE.equals(event.getType())) {
+                if (event.getTouches().length() > 1) {
+                    return false;
+                }
 
-            // Cancel long tap if finger strays too far from
-            // starting point
-            if (diffX > GridConstants.LONG_TAP_THRESHOLD
-                    || diffY > GridConstants.LONG_TAP_THRESHOLD) {
-                sorter.cancelDelayedSort();
-            }
+                event.preventDefault();
 
-            return true;
+                Touch touch = event.getChangedTouches().get(0);
+                double diffX = Math.abs(touch.getClientX()
+                        - rowEventTouchStartingPoint.getX());
+                double diffY = Math.abs(touch.getClientY()
+                        - rowEventTouchStartingPoint.getY());
 
-        } else if (BrowserEvents.TOUCHEND.equals(event.getType())) {
-            if (event.getTouches().length() > 1) {
-                return false;
-            }
+                // Cancel long tap if finger strays too far from
+                // starting point
+                if (diffX > GridConstants.LONG_TAP_THRESHOLD
+                        || diffY > GridConstants.LONG_TAP_THRESHOLD) {
+                    sorter.cancelDelayedSort();
+                }
 
-            if (sorter.isDelayedSortScheduled()) {
-                // Not a long tap yet, perform single sort
-                sorter.cancelDelayedSort();
-                sorter.sort(eventCell.getColumn(), false);
-            }
+                return true;
 
-            return true;
+            } else if (BrowserEvents.TOUCHEND.equals(event.getType())) {
+                if (event.getTouches().length() > 1) {
+                    return false;
+                }
 
-        } else if (BrowserEvents.TOUCHCANCEL.equals(event.getType())) {
-            if (event.getTouches().length() > 1) {
-                return false;
-            }
+                if (sorter.isDelayedSortScheduled()) {
+                    // Not a long tap yet, perform single sort
+                    sorter.cancelDelayedSort();
+                    sorter.sort(cell.getColumn(), false);
+                }
 
-            sorter.cancelDelayedSort();
+                return true;
 
-            return true;
+            } else if (BrowserEvents.TOUCHCANCEL.equals(event.getType())) {
+                if (event.getTouches().length() > 1) {
+                    return false;
+                }
 
-        } else if (BrowserEvents.CLICK.equals(event.getType())) {
+                sorter.cancelDelayedSort();
 
-            sorter.sort(eventCell.getColumn(), event.getShiftKey());
+                return true;
 
-            // Click events should go onward to cell focus logic
-            return false;
-        } else {
-            return false;
+            } else if (BrowserEvents.CLICK.equals(event.getType())) {
+
+                sorter.sort(cell.getColumn(), event.getShiftKey());
+
+                // Click events should go onward to cell focus logic
+                return false;
+            } else {
+                return false;
+            }
         }
-    }
+    };
 
     @Override
     @SuppressWarnings("deprecation")
-- 
2.7.4 (Apple Git-66)


From 6ea64f9cf08eafb53bfbcab72bc2097ed77cc1a6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johannes=20Dahlstr=C3=B6m?= <johannesd@vaadin.com>
Date: Tue, 2 Aug 2016 14:19:14 +0300
Subject: [PATCH 3/4] Move Grid event handlers to a list, add method to add
 custom handlers

Change-Id: I3182f8155455971cfef45d27ff2151b38cbb7b64
---
 .../client/widget/grid/BrowserEventHandler.java    |  39 +++++++
 .../main/java/com/vaadin/client/widgets/Grid.java  | 119 ++++++++++-----------
 2 files changed, 94 insertions(+), 64 deletions(-)
 create mode 100644 client/src/main/java/com/vaadin/client/widget/grid/BrowserEventHandler.java

diff --git a/client/src/main/java/com/vaadin/client/widget/grid/BrowserEventHandler.java b/client/src/main/java/com/vaadin/client/widget/grid/BrowserEventHandler.java
new file mode 100644
index 0000000..5f4c7b6
--- /dev/null
+++ b/client/src/main/java/com/vaadin/client/widget/grid/BrowserEventHandler.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2000-2014 Vaadin Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.vaadin.client.widget.grid;
+
+import com.google.gwt.user.client.Event;
+
+/**
+ * A handler for DOM events emitted by elements in Grid.
+ *
+ * @param <T>
+ *            the grid row type
+ */
+public interface BrowserEventHandler<T> {
+    /**
+     * Attempts to handle the given DOM event. Returns whether the event was
+     * handled and subsequent handlers should not be run.
+     * 
+     * @param event
+     *            the event that occurred
+     * @param cell
+     *            the cell where the event occurred
+     * @return true if subsequent handlers should not be run, false
+     *         otherwise
+     */
+    public boolean onEvent(Event event, EventCellReference<T> cell);
+}
\ No newline at end of file
diff --git a/client/src/main/java/com/vaadin/client/widgets/Grid.java b/client/src/main/java/com/vaadin/client/widgets/Grid.java
index 5eb1b55..0d16d3e 100644
--- a/client/src/main/java/com/vaadin/client/widgets/Grid.java
+++ b/client/src/main/java/com/vaadin/client/widgets/Grid.java
@@ -109,6 +109,7 @@ import com.vaadin.client.widget.escalator.events.RowHeightChangedHandler;
 import com.vaadin.client.widget.grid.AutoScroller;
 import com.vaadin.client.widget.grid.AutoScroller.AutoScrollerCallback;
 import com.vaadin.client.widget.grid.AutoScroller.ScrollAxis;
+import com.vaadin.client.widget.grid.BrowserEventHandler;
 import com.vaadin.client.widget.grid.CellReference;
 import com.vaadin.client.widget.grid.CellStyleGenerator;
 import com.vaadin.client.widget.grid.DataAvailableEvent;
@@ -2413,27 +2414,6 @@ public class Grid<T> extends ResizeComposite implements
         }
     }
 
-    /**
-     * A handler for DOM events emitted by elements in Grid.
-     *
-     * @param <T>
-     *            the grid row type
-     */
-    public interface BrowserEventHandler<T> {
-        /**
-         * Attempts to handle the given DOM event. Returns whether the event was
-         * handled and subsequent handlers should not be run.
-         * 
-         * @param event
-         *            the event that occurred
-         * @param cell
-         *            the cell where the event occurred
-         * @return true if subsequent handlers should not be run, false
-         *         otherwise
-         */
-        public boolean onEvent(Event event, EventCellReference<T> cell);
-    }
-
     private static final String CUSTOM_STYLE_PROPERTY_NAME = "customStyle";
 
     /**
@@ -4581,6 +4561,8 @@ public class Grid<T> extends ResizeComposite implements
 
     };
 
+    private final List<BrowserEventHandler<T>> browserEventHandlers = new ArrayList<BrowserEventHandler<T>>();
+
     /**
      * Enumeration for easy setting of selection mode.
      */
@@ -5999,6 +5981,23 @@ public class Grid<T> extends ResizeComposite implements
                 dataIsBeingFetched = false;
             }
         });
+
+        browserEventHandlers.addAll(Arrays.asList(
+                // Opening, closing and navigating in the editor
+                editorEventHandler,
+                // Keyboard and click handlers, Escalator events
+                superEventHandler,
+                // Ignore events that propagate from a child widget
+                childWidgetEventHandler,
+                // Column reordering via header drag&drop
+                headerCellDragStartHandler,
+                // Column sorting via header click
+                headerDefaultRowEventHandler,
+                // Invoking event-aware renderers
+                rendererEventHandler,
+                // Moving cell focus by keyboard or mouse
+                cellFocusEventHandler 
+                ));
     }
 
     @Override
@@ -7211,35 +7210,10 @@ public class Grid<T> extends ResizeComposite implements
                 + "-event with a null cell target";
         eventCell.set(cell, getSectionFromContainer(container));
 
-        // Editor can steal focus from Grid and is still handled
-        if (editorEventHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        // Fire GridKeyEvents and GridClickEvents. Pass the event to escalator.
-        if (superEventHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        if (childWidgetEventHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        if (headerCellDragStartHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        // Sorting through header Click / KeyUp
-        if (headerDefaultRowEventHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        if (rendererEventHandler.onEvent(event, eventCell)) {
-            return;
-        }
-
-        if (cellFocusEventHandler.onEvent(event, eventCell)) {
-            return;
+        for (BrowserEventHandler<T> handler : browserEventHandlers) {
+            if (handler.onEvent(event, eventCell)) {
+                return;
+            }
         }
     }
 
@@ -7292,7 +7266,7 @@ public class Grid<T> extends ResizeComposite implements
         return w != null;
     }
 
-    private BrowserEventHandler<T> editorEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> editorEventHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event e, EventCellReference<T> cell) {
@@ -7313,7 +7287,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private BrowserEventHandler<T> superEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> superEventHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event event, EventCellReference<T> cell) {
@@ -7322,7 +7296,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private BrowserEventHandler<T> childWidgetEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> childWidgetEventHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event e, EventCellReference<T> cell) {
@@ -7330,7 +7304,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private BrowserEventHandler<T> rendererEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> rendererEventHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event e, EventCellReference<T> cell) {
@@ -7365,7 +7339,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private BrowserEventHandler<T> cellFocusEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> cellFocusEventHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event e, EventCellReference<T> cell) {
@@ -7378,7 +7352,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private BrowserEventHandler<T> headerCellDragStartHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> headerCellDragStartHandler = new BrowserEventHandler<T>() {
 
         @Override
         public boolean onEvent(Event e, EventCellReference<T> cell) {
@@ -7406,14 +7380,7 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
-    private CellStyleGenerator<T> cellStyleGenerator;
-    private RowStyleGenerator<T> rowStyleGenerator;
-    private RowReference<T> rowReference = new RowReference<>(this);
-    private CellReference<T> cellReference = new CellReference<>(rowReference);
-    private RendererCellReference rendererCellReference = new RendererCellReference(
-            (RowReference<Object>) rowReference);
-
-    private BrowserEventHandler<T> headerDefaultRowEventHandler = new BrowserEventHandler<T>() {
+    private final BrowserEventHandler<T> headerDefaultRowEventHandler = new BrowserEventHandler<T>() {
 
         private Point rowEventTouchStartingPoint;
 
@@ -7507,6 +7474,13 @@ public class Grid<T> extends ResizeComposite implements
         }
     };
 
+    private CellStyleGenerator<T> cellStyleGenerator;
+    private RowStyleGenerator<T> rowStyleGenerator;
+    private RowReference<T> rowReference = new RowReference<>(this);
+    private CellReference<T> cellReference = new CellReference<>(rowReference);
+    private RendererCellReference rendererCellReference = new RendererCellReference(
+            (RowReference<Object>) rowReference);
+
     @Override
     @SuppressWarnings("deprecation")
     public com.google.gwt.user.client.Element getSubPartElement(String subPart) {
@@ -8221,6 +8195,23 @@ public class Grid<T> extends ResizeComposite implements
     }
 
     /**
+     * Adds a low-level DOM event handler to this Grid. The handler is inserted
+     * into the given position in the list of handlers. The handlers are invoked
+     * in order. If the
+     * {@link BrowserEventHandler#onEvent(Event, EventCellReference) onEvent}
+     * method of a handler returns true, subsequent handlers are not invoked.
+     * 
+     * @param index
+     *            the index to insert the handler to
+     * @param handler
+     *            the handler to add
+     */
+    public void addBrowserEventHandler(int index,
+            BrowserEventHandler<T> handler) {
+        browserEventHandlers.add(index, handler);
+    }
+
+    /**
      * Apply sorting to data source.
      */
     private void sort(boolean userOriginated) {
-- 
2.7.4 (Apple Git-66)


From 3da57fe707d9977cdbb65faee4b19cf7ab6c24f4 Mon Sep 17 00:00:00 2001
From: adam <adam@vaadin.com>
Date: Tue, 27 Sep 2016 15:15:45 +0300
Subject: [PATCH 4/4] Default null value if item property does not exist

Change-Id: I6f7718518afb67db76205490f7464dc8bf15f1af
---
 server/src/main/java/com/vaadin/ui/Grid.java | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/server/src/main/java/com/vaadin/ui/Grid.java b/server/src/main/java/com/vaadin/ui/Grid.java
index 388d74a..0d80236 100644
--- a/server/src/main/java/com/vaadin/ui/Grid.java
+++ b/server/src/main/java/com/vaadin/ui/Grid.java
@@ -2195,8 +2195,9 @@ public class Grid extends AbstractFocusable implements SelectionNotifier,
             Renderer<?> renderer = column.getRenderer();
 
             Item item = cell.getItem();
-            Object modelValue = item.getItemProperty(cell.getPropertyId())
-                    .getValue();
+            Property itemProperty = item.getItemProperty(cell.getPropertyId());
+            Object modelValue =
+                    itemProperty != null ? itemProperty.getValue() : null;
 
             data.put(columnKeys.key(cell.getPropertyId()), AbstractRenderer
                     .encodeValue(modelValue, renderer, converter, getLocale()));
-- 
2.7.4 (Apple Git-66)

